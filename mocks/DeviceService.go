// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	domain "challenge/domain"
	errors "challenge/lib/errors"

	mock "github.com/stretchr/testify/mock"
)

// DeviceService is an autogenerated mock type for the DeviceService type
type DeviceService struct {
	mock.Mock
}

// CreateDevice provides a mock function with given fields: _a0
func (_m *DeviceService) CreateDevice(_a0 *domain.Device) (*domain.Device, *errors.AppError) {
	ret := _m.Called(_a0)

	var r0 *domain.Device
	if rf, ok := ret.Get(0).(func(*domain.Device) *domain.Device); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Device)
		}
	}

	var r1 *errors.AppError
	if rf, ok := ret.Get(1).(func(*domain.Device) *errors.AppError); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.AppError)
		}
	}

	return r0, r1
}

// GetDevice provides a mock function with given fields: _a0
func (_m *DeviceService) GetDevice(_a0 string) (*domain.Device, *errors.AppError) {
	ret := _m.Called(_a0)

	var r0 *domain.Device
	if rf, ok := ret.Get(0).(func(string) *domain.Device); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Device)
		}
	}

	var r1 *errors.AppError
	if rf, ok := ret.Get(1).(func(string) *errors.AppError); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.AppError)
		}
	}

	return r0, r1
}
